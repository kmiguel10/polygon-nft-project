{
  "address": "0x5A2C9de6fF188eD12eA2a27DeC20c95DB480c671",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "lowSvg",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "highSvg",
          "type": "string"
        },
        {
          "internalType": "int256",
          "name": "highValue",
          "type": "int256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CANNOT_TRANSFER_TO_ZERO_ADDRESS",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NOT_CURRENT_OWNER",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_approved",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_highValue",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_priceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_highImageURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_lowImageURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_tokenCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "_interfaceID",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "svg",
          "type": "string"
        }
      ],
      "name": "svgToImageURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x00d0fca15eb2ef221516acf0d72255ee35a38daa65718d1651847bb2cec396c6",
  "receipt": {
    "to": null,
    "from": "0xDc5f001CF1F2ED7C0325021A1a6c4a5a0683f6d7",
    "contractAddress": "0x5A2C9de6fF188eD12eA2a27DeC20c95DB480c671",
    "transactionIndex": 9,
    "gasUsed": "4789777",
    "logsBloom": "0x
    "blockHash": "0x11a5ae465bce894e32113732deb5731887925ea81414af3feb2e245a9d92cf76",
    "transactionHash": "0x00d0fca15eb2ef221516acf0d72255ee35a38daa65718d1651847bb2cec396c6",
    "logs": [],
    "blockNumber": 10735374,
    "cumulativeGasUsed": "17316886",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8A753747A1Fa494EC906cE90E9f37563A8AF630e",
    "<?xml version=\"1.0\" standalone=\"no\"?>\n<svg width=\"1024px\" height=\"1024px\" viewBox=\"0 0 1024 1024\" xmlns=\"http://www.w3.org/2000/svg\">\n  <path fill=\"#333\" d=\"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z\"/>\n  <path fill=\"#E6E6E6\" d=\"M512 140c-205.4 0-372 166.6-372 372s166.6 372 372 372 372-166.6 372-372-166.6-372-372-372zM288 421a48.01 48.01 0 0 1 96 0 48.01 48.01 0 0 1-96 0zm376 272h-48.1c-4.2 0-7.8-3.2-8.1-7.4C604 636.1 562.5 597 512 597s-92.1 39.1-95.8 88.6c-.3 4.2-3.9 7.4-8.1 7.4H360a8 8 0 0 1-8-8.4c4.4-84.3 74.5-151.6 160-151.6s155.6 67.3 160 151.6a8 8 0 0 1-8 8.4zm24-224a48.01 48.01 0 0 1 0-96 48.01 48.01 0 0 1 0 96z\"/>\n  <path fill=\"#333\" d=\"M288 421a48 48 0 1 0 96 0 48 48 0 1 0-96 0zm224 112c-85.5 0-155.6 67.3-160 151.6a8 8 0 0 0 8 8.4h48.1c4.2 0 7.8-3.2 8.1-7.4 3.7-49.5 45.3-88.6 95.8-88.6s92 39.1 95.8 88.6c.3 4.2 3.9 7.4 8.1 7.4H664a8 8 0 0 0 8-8.4C667.6 600.3 597.5 533 512 533zm128-112a48 48 0 1 0 96 0 48 48 0 1 0-96 0z\"/>\n</svg>\n",
    "<svg viewBox=\"0 0 200 200\" width=\"400\"  height=\"400\" xmlns=\"http://www.w3.org/2000/svg\">\n  <circle cx=\"100\" cy=\"100\" fill=\"yellow\" r=\"78\" stroke=\"black\" stroke-width=\"3\"/>\n  <g class=\"eyes\">\n    <circle cx=\"61\" cy=\"82\" r=\"12\"/>\n    <circle cx=\"127\" cy=\"82\" r=\"12\"/>\n  </g>\n  <path d=\"m136.81 116.53c.69 26.17-64.11 42-81.52-.73\" style=\"fill:none; stroke: black; stroke-width: 3;\"/>\n</svg>",
    180000000000
  ],
  "numDeployments": 7,
  "solcInputHash": "03aa592e4d911e4daff82d371354e4db",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"lowSvg\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"highSvg\",\"type\":\"string\"},{\"internalType\":\"int256\",\"name\":\"highValue\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CANNOT_TRANSFER_TO_ZERO_ADDRESS\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NOT_CURRENT_OWNER\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_approved\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_highValue\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_priceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_highImageURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_lowImageURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_tokenCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"svg\",\"type\":\"string\"}],\"name\":\"svgToImageURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Set or reaffirm the approved address for an NFT. This function can be changed to payable.\",\"params\":{\"_approved\":\"Address to be approved for the given NFT ID.\",\"_tokenId\":\"ID of the token to be approved.\"}},\"balanceOf(address)\":{\"details\":\"Returns the number of NFTs owned by `_owner`. NFTs assigned to the zero address are considered invalid, and this function throws for queries about the zero address.\",\"params\":{\"_owner\":\"Address for whom to query the balance.\"},\"returns\":{\"_0\":\"Balance of _owner.\"}},\"getApproved(uint256)\":{\"details\":\"Get the approved address for a single NFT.\",\"params\":{\"_tokenId\":\"ID of the NFT to query the approval of.\"},\"returns\":{\"_0\":\"Address that _tokenId is approved for.\"}},\"isApprovedForAll(address,address)\":{\"details\":\"Checks if `_operator` is an approved operator for `_owner`.\",\"params\":{\"_operator\":\"The address that acts on behalf of the owner.\",\"_owner\":\"The address that owns the NFTs.\"},\"returns\":{\"_0\":\"True if approved for all, false otherwise.\"}},\"name()\":{\"details\":\"Returns a descriptive name for a collection of NFTokens.\",\"returns\":{\"_name\":\"Representing name.\"}},\"ownerOf(uint256)\":{\"details\":\"Returns the address of the owner of the NFT. NFTs assigned to the zero address are considered invalid, and queries about them do throw.\",\"params\":{\"_tokenId\":\"The identifier for an NFT.\"},\"returns\":{\"_owner\":\"Address of _tokenId owner.\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Transfers the ownership of an NFT from one address to another address. This function can be changed to payable.\",\"params\":{\"_from\":\"The current owner of the NFT.\",\"_to\":\"The new owner.\",\"_tokenId\":\"The NFT to transfer.\"}},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Transfers the ownership of an NFT from one address to another address. This function can be changed to payable.\",\"params\":{\"_data\":\"Additional data with no specified format, sent in call to `_to`.\",\"_from\":\"The current owner of the NFT.\",\"_to\":\"The new owner.\",\"_tokenId\":\"The NFT to transfer.\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"Enables or disables approval for a third party (\\\"operator\\\") to manage all of `msg.sender`'s assets. It also emits the ApprovalForAll event.\",\"params\":{\"_approved\":\"True if the operators is approved, false to revoke approval.\",\"_operator\":\"Address to add to the set of authorized operators.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Function to check which interfaces are supported by this contract.\",\"params\":{\"_interfaceID\":\"Id of the interface.\"},\"returns\":{\"_0\":\"True if _interfaceID is supported, false otherwise.\"}},\"symbol()\":{\"details\":\"Returns an abbreviated name for NFTokens.\",\"returns\":{\"_symbol\":\"Representing symbol.\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Throws unless `msg.sender` is the current owner, an authorized operator, or the approved address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is the zero address. Throws if `_tokenId` is not a valid NFT. This function can be changed to payable.\",\"params\":{\"_from\":\"The current owner of the NFT.\",\"_to\":\"The new owner.\",\"_tokenId\":\"The NFT to transfer.\"}},\"transferOwnership(address)\":{\"details\":\"Allows the current owner to transfer control of the contract to a newOwner.\",\"params\":{\"_newOwner\":\"The address to transfer ownership to.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"approve(address,uint256)\":{\"notice\":\"The zero address indicates there is no approved address. Throws unless `msg.sender` is the current NFT owner, or an authorized operator of the current owner.\"},\"getApproved(uint256)\":{\"notice\":\"Throws if `_tokenId` is not a valid NFT.\"},\"safeTransferFrom(address,address,uint256)\":{\"notice\":\"This works identically to the other function with an extra data parameter, except this function just sets data to \\\"\\\".\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"notice\":\"Throws unless `msg.sender` is the current owner, an authorized operator, or the approved address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is the zero address. Throws if `_tokenId` is not a valid NFT. When transfer is complete, this function checks if `_to` is a smart contract (code size > 0). If so, it calls `onERC721Received` on `_to` and throws if the return value is not `bytes4(keccak256(\\\"onERC721Received(address,uint256,bytes)\\\"))`.\"},\"setApprovalForAll(address,bool)\":{\"notice\":\"This works even if sender doesn't own any tokens at the time.\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"The caller is responsible to confirm that `_to` is capable of receiving NFTs or else they may be permanently lost.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/mocks/DynamicSvgtNft.sol\":\"DynamicSvgNft\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"base64-sol/base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides functions for encoding/decoding base64\\nlibrary Base64 {\\n    string internal constant TABLE_ENCODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n    bytes  internal constant TABLE_DECODE = hex\\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\n                                            hex\\\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\\\"\\n                                            hex\\\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\\\"\\n                                            hex\\\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\\\";\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n\\n        // load the table into memory\\n        string memory table = TABLE_ENCODE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n                // read 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // write 4 characters\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n\\n        return result;\\n    }\\n\\n    function decode(string memory _data) internal pure returns (bytes memory) {\\n        bytes memory data = bytes(_data);\\n\\n        if (data.length == 0) return new bytes(0);\\n        require(data.length % 4 == 0, \\\"invalid base64 decoder input\\\");\\n\\n        // load the table into memory\\n        bytes memory table = TABLE_DECODE;\\n\\n        // every 4 characters represent 3 bytes\\n        uint256 decodedLen = (data.length / 4) * 3;\\n\\n        // add some extra buffer at the end required for the writing\\n        bytes memory result = new bytes(decodedLen + 32);\\n\\n        assembly {\\n            // padding with '='\\n            let lastBytes := mload(add(data, mload(data)))\\n            if eq(and(lastBytes, 0xFF), 0x3d) {\\n                decodedLen := sub(decodedLen, 1)\\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\\n                    decodedLen := sub(decodedLen, 1)\\n                }\\n            }\\n\\n            // set the actual output length\\n            mstore(result, decodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 4 characters at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               // read 4 characters\\n               dataPtr := add(dataPtr, 4)\\n               let input := mload(dataPtr)\\n\\n               // write 3 bytes\\n               let output := add(\\n                   add(\\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\\n                   add(\\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\\n                    )\\n                )\\n                mstore(resultPtr, shl(232, output))\\n                resultPtr := add(resultPtr, 3)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xa73959e6ef0b693e4423a562e612370160b934a75e618361ddd8c9c4b8ddbaaf\",\"license\":\"MIT\"},\"src/contracts/mocks/DynamicSvgtNft.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"base64-sol/base64.sol\\\";\\nimport \\\"../tokens/nf-token-metadata.sol\\\";\\nimport \\\"../ownership/ownable.sol\\\";\\n\\ncontract DynamicSvgNft is NFTokenMetadata, Ownable {\\n    //mint an NFT based on price of ETH\\n    //if ETH someNumber: Smile\\n    //otherwise: Frown\\n\\n    uint public s_tokenCounter;\\n    string public s_lowImageURI;\\n    string public s_highImageURI;\\n    int256 public immutable i_highValue;\\n    AggregatorV3Interface public immutable i_priceFeed;\\n\\n    //Pass SVG files and convert those files to base64 format\\n    constructor(\\n        address priceFeedAddress,\\n        string memory lowSvg,\\n        string memory highSvg,\\n        int256 highValue\\n    ) ERC721() {\\n        s_tokenCounter = 0;\\n        s_lowImageURI = svgToImageURI(lowSvg);\\n        s_highImageURI = svgToImageURI(highSvg);\\n        i_priceFeed = AggregatorV3Interface(priceFeedAddress);\\n        i_highValue = highValue;\\n    }\\n\\n    //returns imageURIs\\n    function svgToImageURI(string memory svg)\\n        public\\n        pure\\n        returns (string memory)\\n    {\\n        string memory baseImageURL = \\\"data:image/svg+xml;base64,\\\";\\n        string memory svgBase64Encoded = Base64.encode(\\n            bytes(string(abi.encodePacked(svg)))\\n        );\\n\\n        return string(abi.encodePacked(baseImageURL, svgBase64Encoded));\\n    }\\n\\n    // function mintNft() external {\\n    //     _safeMint(msg.sender, s_tokenCounter);\\n    //     s_tokenCounter = s_tokenCounter + 1;\\n    // }\\n\\n    function mint() external onlyOwner {\\n        super._mint(msg.sender, s_tokenCounter);\\n        s_tokenCounter = s_tokenCounter + 1;\\n    }\\n\\n    //Returns string to be used from converting svg -> base64\\n    function _baseURI() internal pure returns (string memory) {\\n        return \\\"data:application/json;base64,\\\";\\n    }\\n\\n    //override tokenURI inherited function from ERC721\\n    //\\\"virtual\\\" means function can be overriden\\n    function tokenURI(\\n        uint /*tokenId*/\\n    ) public view override returns (string memory) {\\n        //How do we base64 encode this string -> URL/URI\\n        //How do we get the image?\\n        (, int256 price, , , ) = i_priceFeed.latestRoundData();\\n        string memory imageUri = s_lowImageURI;\\n        if (price > i_highValue) {\\n            imageUri = s_highImageURI;\\n        }\\n\\n        bytes memory metaDataTemplate = (\\n            abi.encodePacked(\\n                '{\\\"name\\\":\\\"Dynamic SVG\\\", \\\"description\\\":\\\"An NFT that changes based on the Chainlink Feed\\\", ',\\n                '\\\"attributes\\\": [{\\\"trait_type\\\": \\\"coolness\\\", \\\"value\\\": 100}], \\\"image\\\":\\\"',\\n                imageUri,\\n                '\\\"}'\\n            )\\n        );\\n\\n        bytes memory metaDataTemplateinBytes = bytes(metaDataTemplate);\\n        string memory encodedMetadata = Base64.encode(metaDataTemplateinBytes);\\n        return (string(abi.encodePacked(_baseURI(), encodedMetadata))); //concatenate string\\n    }\\n}\\n\",\"keccak256\":\"0x243bda8b72c689d53bd45b683d185de72700731dd07ad88a29fc8dd0d8623578\",\"license\":\"MIT\"},\"src/contracts/ownership/ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\n/**\\n * @dev The contract has an owner address, and provides basic authorization control whitch\\n * simplifies the implementation of user permissions. This contract is based on the source code at:\\n * https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/ownership/Ownable.sol\\n */\\ncontract Ownable {\\n    /**\\n     * @dev Error constants.\\n     */\\n    string public constant NOT_CURRENT_OWNER = \\\"018001\\\";\\n    string public constant CANNOT_TRANSFER_TO_ZERO_ADDRESS = \\\"018002\\\";\\n\\n    /**\\n     * @dev Current owner address.\\n     */\\n    address public owner;\\n\\n    /**\\n     * @dev An event which is triggered when the owner is changed.\\n     * @param previousOwner The address of the previous owner.\\n     * @param newOwner The address of the new owner.\\n     */\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev The constructor sets the original `owner` of the contract to the sender account.\\n     */\\n    constructor() {\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, NOT_CURRENT_OWNER);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n     * @param _newOwner The address to transfer ownership to.\\n     */\\n    function transferOwnership(address _newOwner) public onlyOwner {\\n        require(_newOwner != address(0), CANNOT_TRANSFER_TO_ZERO_ADDRESS);\\n        emit OwnershipTransferred(owner, _newOwner);\\n        owner = _newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0xb47dfff356ef762a40a0b6be64d780a8abd526e7ffbc7ace9c302a8e4350f44a\",\"license\":\"MIT\"},\"src/contracts/tokens/erc721-metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\n/**\\n * @dev Optional metadata extension for ERC-721 non-fungible token standard.\\n * See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md.\\n */\\ninterface ERC721Metadata {\\n    /**\\n     * @dev Returns a descriptive name for a collection of NFTs in this contract.\\n     * @return _name Representing name.\\n     */\\n    function name() external view returns (string memory _name);\\n\\n    /**\\n     * @dev Returns a abbreviated name for a collection of NFTs in this contract.\\n     * @return _symbol Representing symbol.\\n     */\\n    function symbol() external view returns (string memory _symbol);\\n\\n    /**\\n     * @dev Returns a distinct Uniform Resource Identifier (URI) for a given asset. It Throws if\\n     * `_tokenId` is not a valid NFT. URIs are defined in RFC3986. The URI may point to a JSON file\\n     * that conforms to the \\\"ERC721 Metadata JSON Schema\\\".\\n     * @return URI of _tokenId.\\n     */\\n    function tokenURI(uint256 _tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xc0f37944c417dae44687c8f5ab7d37f50a91240c933619b7698467e4207be644\",\"license\":\"MIT\"},\"src/contracts/tokens/erc721-token-receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\n/**\\n * @dev ERC-721 interface for accepting safe transfers.\\n * See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md.\\n */\\ninterface ERC721TokenReceiver {\\n    /**\\n     * @notice The contract address is always the message sender. A wallet/broker/auction application\\n     * MUST implement the wallet interface if it will accept safe transfers.\\n     * @dev Handle the receipt of a NFT. The ERC721 smart contract calls this function on the\\n     * recipient after a `transfer`. This function MAY throw to revert and reject the transfer. Return\\n     * of other than the magic value MUST result in the transaction being reverted.\\n     * Returns `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))` unless throwing.\\n     * @param _operator The address which called `safeTransferFrom` function.\\n     * @param _from The address which previously owned the token.\\n     * @param _tokenId The NFT identifier which is being transferred.\\n     * @param _data Additional data with no specified format.\\n     * @return Returns `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`.\\n     */\\n    function onERC721Received(\\n        address _operator,\\n        address _from,\\n        uint256 _tokenId,\\n        bytes calldata _data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x9ce26902318c89c139367b69e2ae1489bccf500d5b2b413e19b463950bae0932\",\"license\":\"MIT\"},\"src/contracts/tokens/erc721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\n/**\\n@dev ERC-721 non-fungible token standard.\\n */\\ninterface ERC721 {\\n    /**\\n     * @dev Emits when ownership of any NFT changes by any mechanism. This event emits when NFTs are\\n     * created (`from` == 0) and destroyed (`to` == 0). Exception: during contract creation, any\\n     * number of NFTs may be created and assigned without emitting Transfer. At the time of any\\n     * transfer, the approved address for that NFT (if any) is reset to none.\\n     */\\n    event Transfer(\\n        address indexed _from,\\n        address indexed _to,\\n        uint256 indexed _tokenId\\n    );\\n\\n    /**\\n     * @dev This emits when the approved address for an NFT is changed or reaffirmed. The zero\\n     * address indicates there is no approved address. When a Transfer event emits, this also\\n     * indicates that the approved address for that NFT (if any) is reset to none.\\n     */\\n    event Approval(\\n        address indexed _owner,\\n        address indexed _approved,\\n        uint256 indexed _tokenId\\n    );\\n\\n    /**\\n     * @dev This emits when an operator is enabled or disabled for an owner. The operator can manage\\n     * all NFTs of the owner.\\n     */\\n    event ApprovalForAll(\\n        address indexed _owner,\\n        address indexed _operator,\\n        bool _approved\\n    );\\n\\n    /**\\n     * @notice Throws unless `msg.sender` is the current owner, an authorized operator, or the\\n     * approved address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is\\n     * the zero address. Throws if `_tokenId` is not a valid NFT. When transfer is complete, this\\n     * function checks if `_to` is a smart contract (code size > 0). If so, it calls\\n     * `onERC721Received` on `_to` and throws if the return value is not\\n     * `bytes4(keccak256(\\\"onERC721Received(address,uint256,bytes)\\\"))`.\\n     * @dev Transfers the ownership of an NFT from one address to another address. This function can\\n     * be changed to payable.\\n     * @param _from The current owner of the NFT.\\n     * @param _to The new owner.\\n     * @param _tokenId The NFT to transfer.\\n     * @param _data Additional data with no specified format, sent in call to `_to`.\\n     */\\n    function safeTransferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _tokenId,\\n        bytes calldata _data\\n    ) external;\\n\\n    /**\\n     * @notice This works identically to the other function with an extra data parameter, except this\\n     * function just sets data to \\\"\\\"\\n     * @dev Transfers the ownership of an NFT from one address to another address. This function can\\n     * be changed to payable.\\n     * @param _from The current owner of the NFT.\\n     * @param _to The new owner.\\n     * @param _tokenId The NFT to transfer.\\n     */\\n    function safeTransferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _tokenId\\n    ) external;\\n\\n    /**\\n     * @notice The caller is responsible to confirm that `_to` is capable of receiving NFTs or else\\n     * they may be permanently lost.\\n     * @dev Throws unless `msg.sender` is the current owner, an authorized operator, or the approved\\n     * address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is the zero\\n     * address. Throws if `_tokenId` is not a valid NFT.  This function can be changed to payable.\\n     * @param _from The current owner of the NFT.\\n     * @param _to The new owner.\\n     * @param _tokenId The NFT to transfer.\\n     */\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _tokenId\\n    ) external;\\n\\n    /**\\n     * @notice The zero address indicates there is no approved address. Throws unless `msg.sender` is\\n     * the current NFT owner, or an authorized operator of the current owner.\\n     * @param _approved The new approved NFT controller.\\n     * @dev Set or reaffirm the approved address for an NFT. This function can be changed to payable.\\n     * @param _tokenId The NFT to approve.\\n     */\\n    function approve(address _approved, uint256 _tokenId) external;\\n\\n    /**\\n     * @notice The contract MUST allow multiple operators per owner.\\n     * @dev Enables or disables approval for a third party (\\\"operator\\\") to manage all of\\n     * `msg.sender`'s assets. It also emits the ApprovalForAll event.\\n     * @param _operator Address to add to the set of authorized operators.\\n     * @param _approved True if the operators is approved, false to revoke approval.\\n     */\\n    function setApprovalForAll(address _operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the number of NFTs owned by `_owner`. NFTs assigned to the zero address are\\n     * considered invalid, and this function throws for queries about the zero address.\\n     * @notice Count all NFTs assigned to an owner.\\n     * @param _owner Address for whom to query the balance.\\n     * @return Balance of _owner.\\n     */\\n    function balanceOf(address _owner) external view returns (uint256);\\n\\n    /**\\n     * @notice Find the owner of an NFT.\\n     * @dev Returns the address of the owner of the NFT. NFTs assigned to the zero address are\\n     * considered invalid, and queries about them do throw.\\n     * @param _tokenId The identifier for an NFT.\\n     * @return Address of _tokenId owner.\\n     */\\n    function ownerOf(uint256 _tokenId) external view returns (address);\\n\\n    /**\\n     * @notice Throws if `_tokenId` is not a valid NFT.\\n     * @dev Get the approved address for a single NFT.\\n     * @param _tokenId The NFT to find the approved address for.\\n     * @return Address that _tokenId is approved for.\\n     */\\n    function getApproved(uint256 _tokenId) external view returns (address);\\n\\n    /**\\n     * @notice Query if an address is an authorized operator for another address.\\n     * @dev Returns true if `_operator` is an approved operator for `_owner`, false otherwise.\\n     * @param _owner The address that owns the NFTs.\\n     * @param _operator The address that acts on behalf of the owner.\\n     * @return True if approved for all, false otherwise.\\n     */\\n    function isApprovedForAll(address _owner, address _operator)\\n        external\\n        view\\n        returns (bool);\\n}\\n\",\"keccak256\":\"0xa1000bdb590218f0016a15da708b24e2a0b378f4f3b1ea1f82070caa568cc7b5\",\"license\":\"MIT\"},\"src/contracts/tokens/nf-token-metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"./nf-token.sol\\\";\\nimport \\\"./erc721-metadata.sol\\\";\\n\\n/**\\n * @dev Optional metadata implementation for ERC-721 non-fungible token standard.\\n */\\ncontract NFTokenMetadata is NFToken, ERC721Metadata {\\n    /**\\n     * @dev A descriptive name for a collection of NFTs.\\n     */\\n    string internal nftName;\\n\\n    /**\\n     * @dev An abbreviated name for NFTokens.\\n     */\\n    string internal nftSymbol;\\n\\n    /**\\n     * @dev Mapping from NFT ID to metadata uri.\\n     */\\n    mapping(uint256 => string) internal idToUri;\\n\\n    /**\\n     * @notice When implementing this contract don't forget to set nftName and nftSymbol.\\n     * @dev Contract constructor.\\n     */\\n    constructor() {\\n        supportedInterfaces[0x5b5e139f] = true; // ERC721Metadata\\n    }\\n\\n    /**\\n     * @dev Returns a descriptive name for a collection of NFTokens.\\n     * @return _name Representing name.\\n     */\\n    function name() external view override returns (string memory _name) {\\n        _name = nftName;\\n    }\\n\\n    /**\\n     * @dev Returns an abbreviated name for NFTokens.\\n     * @return _symbol Representing symbol.\\n     */\\n    function symbol() external view override returns (string memory _symbol) {\\n        _symbol = nftSymbol;\\n    }\\n\\n    /**\\n     * @dev A distinct URI (RFC 3986) for a given NFT.\\n     * @param _tokenId Id for which we want uri.\\n     * @return URI of _tokenId.\\n     */\\n    function tokenURI(uint256 _tokenId)\\n        external\\n        view\\n        virtual\\n        override\\n        validNFToken(_tokenId)\\n        returns (string memory)\\n    {\\n        return _tokenURI(_tokenId);\\n    }\\n\\n    /**\\n     * @notice This is an internal function that can be overriden if you want to implement a different\\n     * way to generate token URI.\\n     * @param _tokenId Id for which we want uri.\\n     * @return URI of _tokenId.\\n     */\\n    function _tokenURI(uint256 _tokenId)\\n        internal\\n        view\\n        virtual\\n        returns (string memory)\\n    {\\n        return idToUri[_tokenId];\\n    }\\n\\n    /**\\n     * @notice This is an internal function which should be called from user-implemented external\\n     * burn function. Its purpose is to show and properly initialize data structures when using this\\n     * implementation. Also, note that this burn implementation allows the minter to re-mint a burned\\n     * NFT.\\n     * @dev Burns a NFT.\\n     * @param _tokenId ID of the NFT to be burned.\\n     */\\n    function _burn(uint256 _tokenId) internal virtual override {\\n        super._burn(_tokenId);\\n\\n        delete idToUri[_tokenId];\\n    }\\n\\n    /**\\n     * @notice This is an internal function which should be called from user-implemented external\\n     * function. Its purpose is to show and properly initialize data structures when using this\\n     * implementation.\\n     * @dev Set a distinct URI (RFC 3986) for a given NFT ID.\\n     * @param _tokenId Id for which we want URI.\\n     * @param _uri String representing RFC 3986 URI.\\n     */\\n    function _setTokenUri(uint256 _tokenId, string memory _uri)\\n        internal\\n        validNFToken(_tokenId)\\n    {\\n        idToUri[_tokenId] = _uri;\\n    }\\n}\\n\",\"keccak256\":\"0xf3179e4c091bfa904336e1eb6f78351626b8fa68495afd8b4ac71d4ca971121b\",\"license\":\"MIT\"},\"src/contracts/tokens/nf-token.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"./erc721.sol\\\";\\nimport \\\"./erc721-token-receiver.sol\\\";\\nimport \\\"../utils/supports-interface.sol\\\";\\nimport \\\"../utils/address-utils.sol\\\";\\n\\n/**\\n * @dev Implementation of ERC-721 non-fungible token standard.\\n */\\ncontract NFToken is ERC721, SupportsInterface {\\n    using AddressUtils for address;\\n\\n    /**\\n     * @dev List of revert message codes. Implementing dApp should handle showing the correct message.\\n     * Based on 0xcert framework error codes.\\n     */\\n    string constant ZERO_ADDRESS = \\\"003001\\\";\\n    string constant NOT_VALID_NFT = \\\"003002\\\";\\n    string constant NOT_OWNER_OR_OPERATOR = \\\"003003\\\";\\n    string constant NOT_OWNER_APPROVED_OR_OPERATOR = \\\"003004\\\";\\n    string constant NOT_ABLE_TO_RECEIVE_NFT = \\\"003005\\\";\\n    string constant NFT_ALREADY_EXISTS = \\\"003006\\\";\\n    string constant NOT_OWNER = \\\"003007\\\";\\n    string constant IS_OWNER = \\\"003008\\\";\\n\\n    /**\\n     * @dev Magic value of a smart contract that can receive NFT.\\n     * Equal to: bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\")).\\n     */\\n    bytes4 internal constant MAGIC_ON_ERC721_RECEIVED = 0x150b7a02;\\n\\n    /**\\n     * @dev A mapping from NFT ID to the address that owns it.\\n     */\\n    mapping(uint256 => address) internal idToOwner;\\n\\n    /**\\n     * @dev Mapping from NFT ID to approved address.\\n     */\\n    mapping(uint256 => address) internal idToApproval;\\n\\n    /**\\n     * @dev Mapping from owner address to count of their tokens.\\n     */\\n    mapping(address => uint256) private ownerToNFTokenCount;\\n\\n    /**\\n     * @dev Mapping from owner address to mapping of operator addresses.\\n     */\\n    mapping(address => mapping(address => bool)) internal ownerToOperators;\\n\\n    /**\\n     * @dev Guarantees that the msg.sender is an owner or operator of the given NFT.\\n     * @param _tokenId ID of the NFT to validate.\\n     */\\n    modifier canOperate(uint256 _tokenId) {\\n        address tokenOwner = idToOwner[_tokenId];\\n        require(\\n            tokenOwner == msg.sender ||\\n                ownerToOperators[tokenOwner][msg.sender],\\n            NOT_OWNER_OR_OPERATOR\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Guarantees that the msg.sender is allowed to transfer NFT.\\n     * @param _tokenId ID of the NFT to transfer.\\n     */\\n    modifier canTransfer(uint256 _tokenId) {\\n        address tokenOwner = idToOwner[_tokenId];\\n        require(\\n            tokenOwner == msg.sender ||\\n                idToApproval[_tokenId] == msg.sender ||\\n                ownerToOperators[tokenOwner][msg.sender],\\n            NOT_OWNER_APPROVED_OR_OPERATOR\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Guarantees that _tokenId is a valid Token.\\n     * @param _tokenId ID of the NFT to validate.\\n     */\\n    modifier validNFToken(uint256 _tokenId) {\\n        require(idToOwner[_tokenId] != address(0), NOT_VALID_NFT);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Contract constructor.\\n     */\\n    constructor() {\\n        supportedInterfaces[0x80ac58cd] = true; // ERC721\\n    }\\n\\n    /**\\n     * @notice Throws unless `msg.sender` is the current owner, an authorized operator, or the\\n     * approved address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is\\n     * the zero address. Throws if `_tokenId` is not a valid NFT. When transfer is complete, this\\n     * function checks if `_to` is a smart contract (code size > 0). If so, it calls\\n     * `onERC721Received` on `_to` and throws if the return value is not\\n     * `bytes4(keccak256(\\\"onERC721Received(address,uint256,bytes)\\\"))`.\\n     * @dev Transfers the ownership of an NFT from one address to another address. This function can\\n     * be changed to payable.\\n     * @param _from The current owner of the NFT.\\n     * @param _to The new owner.\\n     * @param _tokenId The NFT to transfer.\\n     * @param _data Additional data with no specified format, sent in call to `_to`.\\n     */\\n    function safeTransferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _tokenId,\\n        bytes calldata _data\\n    ) external override {\\n        _safeTransferFrom(_from, _to, _tokenId, _data);\\n    }\\n\\n    /**\\n     * @notice This works identically to the other function with an extra data parameter, except this\\n     * function just sets data to \\\"\\\".\\n     * @dev Transfers the ownership of an NFT from one address to another address. This function can\\n     * be changed to payable.\\n     * @param _from The current owner of the NFT.\\n     * @param _to The new owner.\\n     * @param _tokenId The NFT to transfer.\\n     */\\n    function safeTransferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _tokenId\\n    ) external override {\\n        _safeTransferFrom(_from, _to, _tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @notice The caller is responsible to confirm that `_to` is capable of receiving NFTs or else\\n     * they may be permanently lost.\\n     * @dev Throws unless `msg.sender` is the current owner, an authorized operator, or the approved\\n     * address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is the zero\\n     * address. Throws if `_tokenId` is not a valid NFT. This function can be changed to payable.\\n     * @param _from The current owner of the NFT.\\n     * @param _to The new owner.\\n     * @param _tokenId The NFT to transfer.\\n     */\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _tokenId\\n    ) external override canTransfer(_tokenId) validNFToken(_tokenId) {\\n        address tokenOwner = idToOwner[_tokenId];\\n        require(tokenOwner == _from, NOT_OWNER);\\n        require(_to != address(0), ZERO_ADDRESS);\\n\\n        _transfer(_to, _tokenId);\\n    }\\n\\n    /**\\n     * @notice The zero address indicates there is no approved address. Throws unless `msg.sender` is\\n     * the current NFT owner, or an authorized operator of the current owner.\\n     * @dev Set or reaffirm the approved address for an NFT. This function can be changed to payable.\\n     * @param _approved Address to be approved for the given NFT ID.\\n     * @param _tokenId ID of the token to be approved.\\n     */\\n    function approve(address _approved, uint256 _tokenId)\\n        external\\n        override\\n        canOperate(_tokenId)\\n        validNFToken(_tokenId)\\n    {\\n        address tokenOwner = idToOwner[_tokenId];\\n        require(_approved != tokenOwner, IS_OWNER);\\n\\n        idToApproval[_tokenId] = _approved;\\n        emit Approval(tokenOwner, _approved, _tokenId);\\n    }\\n\\n    /**\\n     * @notice This works even if sender doesn't own any tokens at the time.\\n     * @dev Enables or disables approval for a third party (\\\"operator\\\") to manage all of\\n     * `msg.sender`'s assets. It also emits the ApprovalForAll event.\\n     * @param _operator Address to add to the set of authorized operators.\\n     * @param _approved True if the operators is approved, false to revoke approval.\\n     */\\n    function setApprovalForAll(address _operator, bool _approved)\\n        external\\n        override\\n    {\\n        ownerToOperators[msg.sender][_operator] = _approved;\\n        emit ApprovalForAll(msg.sender, _operator, _approved);\\n    }\\n\\n    /**\\n     * @dev Returns the number of NFTs owned by `_owner`. NFTs assigned to the zero address are\\n     * considered invalid, and this function throws for queries about the zero address.\\n     * @param _owner Address for whom to query the balance.\\n     * @return Balance of _owner.\\n     */\\n    function balanceOf(address _owner)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        require(_owner != address(0), ZERO_ADDRESS);\\n        return _getOwnerNFTCount(_owner);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the owner of the NFT. NFTs assigned to the zero address are\\n     * considered invalid, and queries about them do throw.\\n     * @param _tokenId The identifier for an NFT.\\n     * @return _owner Address of _tokenId owner.\\n     */\\n    function ownerOf(uint256 _tokenId)\\n        external\\n        view\\n        override\\n        returns (address _owner)\\n    {\\n        _owner = idToOwner[_tokenId];\\n        require(_owner != address(0), NOT_VALID_NFT);\\n    }\\n\\n    /**\\n     * @notice Throws if `_tokenId` is not a valid NFT.\\n     * @dev Get the approved address for a single NFT.\\n     * @param _tokenId ID of the NFT to query the approval of.\\n     * @return Address that _tokenId is approved for.\\n     */\\n    function getApproved(uint256 _tokenId)\\n        external\\n        view\\n        override\\n        validNFToken(_tokenId)\\n        returns (address)\\n    {\\n        return idToApproval[_tokenId];\\n    }\\n\\n    /**\\n     * @dev Checks if `_operator` is an approved operator for `_owner`.\\n     * @param _owner The address that owns the NFTs.\\n     * @param _operator The address that acts on behalf of the owner.\\n     * @return True if approved for all, false otherwise.\\n     */\\n    function isApprovedForAll(address _owner, address _operator)\\n        external\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return ownerToOperators[_owner][_operator];\\n    }\\n\\n    /**\\n     * @notice Does NO checks.\\n     * @dev Actually performs the transfer.\\n     * @param _to Address of a new owner.\\n     * @param _tokenId The NFT that is being transferred.\\n     */\\n    function _transfer(address _to, uint256 _tokenId) internal virtual {\\n        address from = idToOwner[_tokenId];\\n        _clearApproval(_tokenId);\\n\\n        _removeNFToken(from, _tokenId);\\n        _addNFToken(_to, _tokenId);\\n\\n        emit Transfer(from, _to, _tokenId);\\n    }\\n\\n    /**\\n     * @notice This is an internal function which should be called from user-implemented external\\n     * mint function. Its purpose is to show and properly initialize data structures when using this\\n     * implementation.\\n     * @dev Mints a new NFT.\\n     * @param _to The address that will own the minted NFT.\\n     * @param _tokenId of the NFT to be minted by the msg.sender.\\n     */\\n    function _mint(address _to, uint256 _tokenId) internal virtual {\\n        require(_to != address(0), ZERO_ADDRESS);\\n        require(idToOwner[_tokenId] == address(0), NFT_ALREADY_EXISTS);\\n\\n        _addNFToken(_to, _tokenId);\\n\\n        emit Transfer(address(0), _to, _tokenId);\\n    }\\n\\n    /**\\n     * @notice This is an internal function which should be called from user-implemented external burn\\n     * function. Its purpose is to show and properly initialize data structures when using this\\n     * implementation. Also, note that this burn implementation allows the minter to re-mint a burned\\n     * NFT.\\n     * @dev Burns a NFT.\\n     * @param _tokenId ID of the NFT to be burned.\\n     */\\n    function _burn(uint256 _tokenId) internal virtual validNFToken(_tokenId) {\\n        address tokenOwner = idToOwner[_tokenId];\\n        _clearApproval(_tokenId);\\n        _removeNFToken(tokenOwner, _tokenId);\\n        emit Transfer(tokenOwner, address(0), _tokenId);\\n    }\\n\\n    /**\\n     * @notice Use and override this function with caution. Wrong usage can have serious consequences.\\n     * @dev Removes a NFT from owner.\\n     * @param _from Address from which we want to remove the NFT.\\n     * @param _tokenId Which NFT we want to remove.\\n     */\\n    function _removeNFToken(address _from, uint256 _tokenId) internal virtual {\\n        require(idToOwner[_tokenId] == _from, NOT_OWNER);\\n        ownerToNFTokenCount[_from] -= 1;\\n        delete idToOwner[_tokenId];\\n    }\\n\\n    /**\\n     * @notice Use and override this function with caution. Wrong usage can have serious consequences.\\n     * @dev Assigns a new NFT to owner.\\n     * @param _to Address to which we want to add the NFT.\\n     * @param _tokenId Which NFT we want to add.\\n     */\\n    function _addNFToken(address _to, uint256 _tokenId) internal virtual {\\n        require(idToOwner[_tokenId] == address(0), NFT_ALREADY_EXISTS);\\n\\n        idToOwner[_tokenId] = _to;\\n        ownerToNFTokenCount[_to] += 1;\\n    }\\n\\n    /**\\n     * @dev Helper function that gets NFT count of owner. This is needed for overriding in enumerable\\n     * extension to remove double storage (gas optimization) of owner NFT count.\\n     * @param _owner Address for whom to query the count.\\n     * @return Number of _owner NFTs.\\n     */\\n    function _getOwnerNFTCount(address _owner)\\n        internal\\n        view\\n        virtual\\n        returns (uint256)\\n    {\\n        return ownerToNFTokenCount[_owner];\\n    }\\n\\n    /**\\n     * @dev Actually perform the safeTransferFrom.\\n     * @param _from The current owner of the NFT.\\n     * @param _to The new owner.\\n     * @param _tokenId The NFT to transfer.\\n     * @param _data Additional data with no specified format, sent in call to `_to`.\\n     */\\n    function _safeTransferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _tokenId,\\n        bytes memory _data\\n    ) private canTransfer(_tokenId) validNFToken(_tokenId) {\\n        address tokenOwner = idToOwner[_tokenId];\\n        require(tokenOwner == _from, NOT_OWNER);\\n        require(_to != address(0), ZERO_ADDRESS);\\n\\n        _transfer(_to, _tokenId);\\n\\n        if (_to.isContract()) {\\n            bytes4 retval = ERC721TokenReceiver(_to).onERC721Received(\\n                msg.sender,\\n                _from,\\n                _tokenId,\\n                _data\\n            );\\n            require(\\n                retval == MAGIC_ON_ERC721_RECEIVED,\\n                NOT_ABLE_TO_RECEIVE_NFT\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Clears the current approval of a given NFT ID.\\n     * @param _tokenId ID of the NFT to be transferred.\\n     */\\n    function _clearApproval(uint256 _tokenId) private {\\n        delete idToApproval[_tokenId];\\n    }\\n}\\n\",\"keccak256\":\"0x4dd0f2c52177b59b06f82e0136a5f59827c898be81a9610d87a437f402d54440\",\"license\":\"MIT\"},\"src/contracts/utils/address-utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\n/**\\n * @notice Based on:\\n * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Address.sol\\n * Requires EIP-1052.\\n * @dev Utility library of inline functions on addresses.\\n */\\nlibrary AddressUtils {\\n    /**\\n     * @dev Returns whether the target address is a contract.\\n     * @param _addr Address to check.\\n     * @return addressCheck True if _addr is a contract, false if not.\\n     */\\n    function isContract(address _addr)\\n        internal\\n        view\\n        returns (bool addressCheck)\\n    {\\n        // This method relies in extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        assembly {\\n            codehash := extcodehash(_addr)\\n        } // solhint-disable-line\\n        addressCheck = (codehash != 0x0 && codehash != accountHash);\\n    }\\n}\\n\",\"keccak256\":\"0xab0dd6d27c23fe88fc71713e49ee6fcc07a4bcf7573815da39ba766f42193581\",\"license\":\"MIT\"},\"src/contracts/utils/erc165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\n/**\\n * @dev A standard for detecting smart contract interfaces.\\n * See: https://eips.ethereum.org/EIPS/eip-165.\\n */\\ninterface ERC165 {\\n    /**\\n     * @dev Checks if the smart contract includes a specific interface.\\n     * This function uses less than 30,000 gas.\\n     * @param _interfaceID The interface identifier, as specified in ERC-165.\\n     * @return True if _interfaceID is supported, false otherwise.\\n     */\\n    function supportsInterface(bytes4 _interfaceID)\\n        external\\n        view\\n        returns (bool);\\n}\\n\",\"keccak256\":\"0x7c9aaab7a5002cd56d046d92ca7d570e66e492a41570aedeefe26612b0e50db5\",\"license\":\"MIT\"},\"src/contracts/utils/supports-interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./erc165.sol\\\";\\n\\n/**\\n * @dev Implementation of standard for detect smart contract interfaces.\\n */\\ncontract SupportsInterface is ERC165 {\\n    /**\\n     * @dev Mapping of supported intefraces. You must not set element 0xffffffff to true.\\n     */\\n    mapping(bytes4 => bool) internal supportedInterfaces;\\n\\n    /**\\n     * @dev Contract constructor.\\n     */\\n    constructor() {\\n        supportedInterfaces[0x01ffc9a7] = true; // ERC165\\n    }\\n\\n    /**\\n     * @dev Function to check which interfaces are supported by this contract.\\n     * @param _interfaceID Id of the interface.\\n     * @return True if _interfaceID is supported, false otherwise.\\n     */\\n    function supportsInterface(bytes4 _interfaceID)\\n        external\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return supportedInterfaces[_interfaceID];\\n    }\\n}\\n\",\"keccak256\":\"0x141e57de6dd07a85323009c9c11563b3a1d364422857239e065b0759956eb96f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b50604051620041003803806200410083398181016040528101906200003791906200059c565b60016000806301ffc9a760e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548160ff02191690831515021790555060016000806380ac58cd60e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548160ff0219169083151502179055506001600080635b5e139f60e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548160ff02191690831515021790555033600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600060098190555062000184836200020e60201b60201c565b600a90805190602001906200019b92919062000440565b50620001ad826200020e60201b60201c565b600b9080519060200190620001c492919062000440565b508373ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1660601b8152505080608081815250505050505062000a2e565b606060006040518060400160405280601a81526020017f646174613a696d6167652f7376672b786d6c3b6261736536342c00000000000081525090506000620002838460405160200162000263919062000683565b604051602081830303815290604052620002b260201b62001b191760201c565b905081816040516020016200029a9291906200069c565b60405160208183030381529060405292505050919050565b6060600082511415620002d7576040518060200160405280600081525090506200043b565b6000604051806060016040528060408152602001620040c0604091399050600060036002855162000309919062000739565b62000315919062000796565b6004620003239190620007ce565b9050600060208262000336919062000739565b67ffffffffffffffff811115620003525762000351620009a6565b5b6040519080825280601f01601f191660200182016040528015620003855781602001600182028036833780820191505090505b509050818152600183018586518101602084015b81831015620003f6576003830192508251603f8160121c168501518253600182019150603f81600c1c168501518253600182019150603f8160061c168501518253600182019150603f811685015182536001820191505062000399565b60038951066001811462000413576002811462000424576200042f565b613d3d60f01b60028303526200042f565b603d60f81b60018303525b50505050508093505050505b919050565b8280546200044e90620008ad565b90600052602060002090601f016020900481019282620004725760008555620004be565b82601f106200048d57805160ff1916838001178555620004be565b82800160010185558215620004be579182015b82811115620004bd578251825591602001919060010190620004a0565b5b509050620004cd9190620004d1565b5090565b5b80821115620004ec576000816000905550600101620004d2565b5090565b6000620005076200050184620006ed565b620006c4565b905082815260208101848484011115620005265762000525620009da565b5b6200053384828562000877565b509392505050565b6000815190506200054c81620009fa565b92915050565b600081519050620005638162000a14565b92915050565b600082601f830112620005815762000580620009d5565b5b815162000593848260208601620004f0565b91505092915050565b60008060008060808587031215620005b957620005b8620009e4565b5b6000620005c9878288016200053b565b945050602085015167ffffffffffffffff811115620005ed57620005ec620009df565b5b620005fb8782880162000569565b935050604085015167ffffffffffffffff8111156200061f576200061e620009df565b5b6200062d8782880162000569565b9250506060620006408782880162000552565b91505092959194509250565b6000620006598262000723565b6200066581856200072e565b93506200067781856020860162000877565b80840191505092915050565b60006200069182846200064c565b915081905092915050565b6000620006aa82856200064c565b9150620006b882846200064c565b91508190509392505050565b6000620006d0620006e3565b9050620006de8282620008e3565b919050565b6000604051905090565b600067ffffffffffffffff8211156200070b576200070a620009a6565b5b6200071682620009e9565b9050602081019050919050565b600081519050919050565b600081905092915050565b600062000746826200086d565b915062000753836200086d565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156200078b576200078a62000919565b5b828201905092915050565b6000620007a3826200086d565b9150620007b0836200086d565b925082620007c357620007c262000948565b5b828204905092915050565b6000620007db826200086d565b9150620007e8836200086d565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161562000824576200082362000919565b5b828202905092915050565b60006200083c826200084d565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b83811015620008975780820151818401526020810190506200087a565b83811115620008a7576000848401525b50505050565b60006002820490506001821680620008c657607f821691505b60208210811415620008dd57620008dc62000977565b5b50919050565b620008ee82620009e9565b810181811067ffffffffffffffff8211171562000910576200090f620009a6565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b62000a05816200082f565b811462000a1157600080fd5b50565b62000a1f8162000843565b811462000a2b57600080fd5b50565b60805160a05160601c61365b62000a656000396000818161132c015261153a0152600081816112a9015261166d015261365b6000f3fe608060405234801561001057600080fd5b50600436106101585760003560e01c80637e5bc3de116100c3578063b88d4fde1161007c578063b88d4fde146103b7578063c87b56dd146103d3578063e2c6d0e114610403578063e985e9c514610421578063f2fde38b14610451578063f3fe3bc31461046d57610158565b80637e5bc3de14610305578063860d248a146103235780638da5cb5b14610341578063957b89561461035f57806395d89b411461037d578063a22cb4651461039b57610158565b80631c05364a116101155780631c05364a1461021f57806323b872dd1461023d57806330d871c61461025957806342842e0e146102895780636352211e146102a557806370a08231146102d557610158565b806301ffc9a71461015d57806306fdde031461018d578063081812fc146101ab578063095ea7b3146101db5780630b21a83b146101f75780631249c58b14610215575b600080fd5b61017760048036038101906101729190612c36565b61048b565b6040516101849190612fb2565b60405180910390f35b6101956104f2565b6040516101a29190613003565b60405180910390f35b6101c560048036038101906101c09190612cd9565b610584565b6040516101d29190612f4b565b60405180910390f35b6101f560048036038101906101f09190612bf6565b61069f565b005b6101ff610a82565b60405161020c9190613025565b60405180910390f35b61021d610a88565b005b610227610b74565b6040516102349190613003565b60405180910390f35b61025760048036038101906102529190612adb565b610c02565b005b610273600480360381019061026e9190612c90565b611054565b6040516102809190613003565b60405180910390f35b6102a3600480360381019061029e9190612adb565b6110e7565b005b6102bf60048036038101906102ba9190612cd9565b611107565b6040516102cc9190612f4b565b60405180910390f35b6102ef60048036038101906102ea9190612a6e565b6111ed565b6040516102fc9190613025565b60405180910390f35b61030d6112a7565b60405161031a9190612fe8565b60405180910390f35b61032b6112cb565b6040516103389190613003565b60405180910390f35b610349611304565b6040516103569190612f4b565b60405180910390f35b61036761132a565b6040516103749190612fcd565b60405180910390f35b61038561134e565b6040516103929190613003565b60405180910390f35b6103b560048036038101906103b09190612bb6565b6113e0565b005b6103d160048036038101906103cc9190612b2e565b6114dd565b005b6103ed60048036038101906103e89190612cd9565b611534565b6040516103fa9190613003565b60405180910390f35b61040b61178c565b6040516104189190613003565b60405180910390f35b61043b60048036038101906104369190612a9b565b61181a565b6040516104489190612fb2565b60405180910390f35b61046b60048036038101906104669190612a6e565b6118ae565b005b610475611ae0565b6040516104829190613003565b60405180910390f35b6000806000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460ff169050919050565b606060058054610501906132fa565b80601f016020809104026020016040519081016040528092919081815260200182805461052d906132fa565b801561057a5780601f1061054f5761010080835404028352916020019161057a565b820191906000526020600020905b81548152906001019060200180831161055d57829003601f168201915b5050505050905090565b600081600073ffffffffffffffffffffffffffffffffffffffff166001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156040518060400160405280600681526020017f303033303032000000000000000000000000000000000000000000000000000081525090610662576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106599190613003565b60405180910390fd5b506002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16915050919050565b8060006001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614806107985750600460008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b6040518060400160405280600681526020017f30303330303300000000000000000000000000000000000000000000000000008152509061080f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108069190613003565b60405180910390fd5b5082600073ffffffffffffffffffffffffffffffffffffffff166001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156040518060400160405280600681526020017f3030333030320000000000000000000000000000000000000000000000000000815250906108ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108e39190613003565b60405180910390fd5b5060006001600086815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614156040518060400160405280600681526020017f3030333030380000000000000000000000000000000000000000000000000000815250906109cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109c39190613003565b60405180910390fd5b50856002600087815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550848673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a4505050505050565b60095481565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146040518060400160405280600681526020017f303138303031000000000000000000000000000000000000000000000000000081525090610b50576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b479190613003565b60405180910390fd5b50610b5d33600954611c92565b6001600954610b6c91906130d9565b600981905550565b600b8054610b81906132fa565b80601f0160208091040260200160405190810160405280929190818152602001828054610bad906132fa565b8015610bfa5780601f10610bcf57610100808354040283529160200191610bfa565b820191906000526020600020905b815481529060010190602001808311610bdd57829003601f168201915b505050505081565b8060006001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161480610cd357503373ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b80610d645750600460008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b6040518060400160405280600681526020017f303033303034000000000000000000000000000000000000000000000000000081525090610ddb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dd29190613003565b60405180910390fd5b5082600073ffffffffffffffffffffffffffffffffffffffff166001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156040518060400160405280600681526020017f303033303032000000000000000000000000000000000000000000000000000081525090610eb8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eaf9190613003565b60405180910390fd5b5060006001600086815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146040518060400160405280600681526020017f303033303037000000000000000000000000000000000000000000000000000081525090610f97576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f8e9190613003565b60405180910390fd5b50600073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614156040518060400160405280600681526020017f303033303031000000000000000000000000000000000000000000000000000081525090611040576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110379190613003565b60405180910390fd5b5061104b8686611e80565b50505050505050565b606060006040518060400160405280601a81526020017f646174613a696d6167652f7376672b786d6c3b6261736536342c000000000000815250905060006110ba846040516020016110a69190612ed8565b604051602081830303815290604052611b19565b905081816040516020016110cf929190612eef565b60405160208183030381529060405292505050919050565b61110283838360405180602001604052806000815250611f35565b505050565b60006001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156040518060400160405280600681526020017f3030333030320000000000000000000000000000000000000000000000000000815250906111e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111de9190613003565b60405180910390fd5b50919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156040518060400160405280600681526020017f303033303031000000000000000000000000000000000000000000000000000081525090611296576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161128d9190613003565b60405180910390fd5b506112a082612503565b9050919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6040518060400160405280600681526020017f303138303032000000000000000000000000000000000000000000000000000081525081565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b60606006805461135d906132fa565b80601f0160208091040260200160405190810160405280929190818152602001828054611389906132fa565b80156113d65780601f106113ab576101008083540402835291602001916113d6565b820191906000526020600020905b8154815290600101906020018083116113b957829003601f168201915b5050505050905090565b80600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516114d19190612fb2565b60405180910390a35050565b61152d85858585858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050611f35565b5050505050565b606060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561159e57600080fd5b505afa1580156115b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115d69190612d06565b5050509150506000600a80546115eb906132fa565b80601f0160208091040260200160405190810160405280929190818152602001828054611617906132fa565b80156116645780601f1061163957610100808354040283529160200191611664565b820191906000526020600020905b81548152906001019060200180831161164757829003601f168201915b505050505090507f000000000000000000000000000000000000000000000000000000000000000082131561172157600b80546116a0906132fa565b80601f01602080910402602001604051908101604052809291908181526020018280546116cc906132fa565b80156117195780601f106116ee57610100808354040283529160200191611719565b820191906000526020600020905b8154815290600101906020018083116116fc57829003601f168201915b505050505090505b6000816040516020016117349190612f13565b60405160208183030381529060405290506000819050600061175582611b19565b905061175f61254c565b81604051602001611771929190612eef565b60405160208183030381529060405295505050505050919050565b600a8054611799906132fa565b80601f01602080910402602001604051908101604052809291908181526020018280546117c5906132fa565b80156118125780601f106117e757610100808354040283529160200191611812565b820191906000526020600020905b8154815290600101906020018083116117f557829003601f168201915b505050505081565b6000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146040518060400160405280600681526020017f303138303031000000000000000000000000000000000000000000000000000081525090611976576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161196d9190613003565b60405180910390fd5b50600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156040518060400160405280600681526020017f303138303032000000000000000000000000000000000000000000000000000081525090611a1f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a169190613003565b60405180910390fd5b508073ffffffffffffffffffffffffffffffffffffffff16600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6040518060400160405280600681526020017f303138303031000000000000000000000000000000000000000000000000000081525081565b6060600082511415611b3c57604051806020016040528060008152509050611c8d565b60006040518060600160405280604081526020016135e66040913990506000600360028551611b6b91906130d9565b611b75919061312f565b6004611b819190613160565b90506000602082611b9291906130d9565b67ffffffffffffffff811115611bab57611baa6133ea565b5b6040519080825280601f01601f191660200182016040528015611bdd5781602001600182028036833780820191505090505b509050818152600183018586518101602084015b81831015611c4c576003830192508251603f8160121c168501518253600182019150603f81600c1c168501518253600182019150603f8160061c168501518253600182019150603f8116850151825360018201915050611bf1565b600389510660018114611c665760028114611c7657611c81565b613d3d60f01b6002830352611c81565b603d60f81b60018303525b50505050508093505050505b919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156040518060400160405280600681526020017f303033303031000000000000000000000000000000000000000000000000000081525090611d3a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d319190613003565b60405180910390fd5b50600073ffffffffffffffffffffffffffffffffffffffff166001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146040518060400160405280600681526020017f303033303036000000000000000000000000000000000000000000000000000081525090611e15576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e0c9190613003565b60405180910390fd5b50611e208282612589565b808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b60006001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050611ec182612711565b611ecb818361274a565b611ed58383612589565b818373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b8160006001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16148061200657503373ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b806120975750600460008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b6040518060400160405280600681526020017f30303330303400000000000000000000000000000000000000000000000000008152509061210e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121059190613003565b60405180910390fd5b5083600073ffffffffffffffffffffffffffffffffffffffff166001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156040518060400160405280600681526020017f3030333030320000000000000000000000000000000000000000000000000000815250906121eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121e29190613003565b60405180910390fd5b5060006001600087815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508773ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146040518060400160405280600681526020017f3030333030370000000000000000000000000000000000000000000000000000815250906122ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122c19190613003565b60405180910390fd5b50600073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff1614156040518060400160405280600681526020017f303033303031000000000000000000000000000000000000000000000000000081525090612373576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161236a9190613003565b60405180910390fd5b5061237e8787611e80565b61239d8773ffffffffffffffffffffffffffffffffffffffff166128b5565b156124f95760008773ffffffffffffffffffffffffffffffffffffffff1663150b7a02338b8a8a6040518563ffffffff1660e01b81526004016123e39493929190612f66565b602060405180830381600087803b1580156123fd57600080fd5b505af1158015612411573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124359190612c63565b905063150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916146040518060400160405280600681526020017f3030333030350000000000000000000000000000000000000000000000000000815250906124f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124ed9190613003565b60405180910390fd5b50505b5050505050505050565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60606040518060400160405280601d81526020017f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000815250905090565b600073ffffffffffffffffffffffffffffffffffffffff166001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146040518060400160405280600681526020017f303033303036000000000000000000000000000000000000000000000000000081525090612663576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161265a9190613003565b60405180910390fd5b50816001600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461270691906130d9565b925050819055505050565b6002600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550565b8173ffffffffffffffffffffffffffffffffffffffff166001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146040518060400160405280600681526020017f303033303037000000000000000000000000000000000000000000000000000081525090612823576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161281a9190613003565b60405180910390fd5b506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461287491906131ba565b925050819055506001600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690555050565b60008060007fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47060001b9050833f91506000801b82141580156128f75750808214155b92505050919050565b600061291361290e84613065565b613040565b90508281526020810184848401111561292f5761292e613428565b5b61293a8482856132b8565b509392505050565b6000813590506129518161355b565b92915050565b60008135905061296681613572565b92915050565b60008135905061297b81613589565b92915050565b60008151905061299081613589565b92915050565b60008083601f8401126129ac576129ab61341e565b5b8235905067ffffffffffffffff8111156129c9576129c8613419565b5b6020830191508360018202830111156129e5576129e4613423565b5b9250929050565b6000815190506129fb816135a0565b92915050565b600082601f830112612a1657612a1561341e565b5b8135612a26848260208601612900565b91505092915050565b600081359050612a3e816135b7565b92915050565b600081519050612a53816135b7565b92915050565b600081519050612a68816135ce565b92915050565b600060208284031215612a8457612a83613432565b5b6000612a9284828501612942565b91505092915050565b60008060408385031215612ab257612ab1613432565b5b6000612ac085828601612942565b9250506020612ad185828601612942565b9150509250929050565b600080600060608486031215612af457612af3613432565b5b6000612b0286828701612942565b9350506020612b1386828701612942565b9250506040612b2486828701612a2f565b9150509250925092565b600080600080600060808688031215612b4a57612b49613432565b5b6000612b5888828901612942565b9550506020612b6988828901612942565b9450506040612b7a88828901612a2f565b935050606086013567ffffffffffffffff811115612b9b57612b9a61342d565b5b612ba788828901612996565b92509250509295509295909350565b60008060408385031215612bcd57612bcc613432565b5b6000612bdb85828601612942565b9250506020612bec85828601612957565b9150509250929050565b60008060408385031215612c0d57612c0c613432565b5b6000612c1b85828601612942565b9250506020612c2c85828601612a2f565b9150509250929050565b600060208284031215612c4c57612c4b613432565b5b6000612c5a8482850161296c565b91505092915050565b600060208284031215612c7957612c78613432565b5b6000612c8784828501612981565b91505092915050565b600060208284031215612ca657612ca5613432565b5b600082013567ffffffffffffffff811115612cc457612cc361342d565b5b612cd084828501612a01565b91505092915050565b600060208284031215612cef57612cee613432565b5b6000612cfd84828501612a2f565b91505092915050565b600080600080600060a08688031215612d2257612d21613432565b5b6000612d3088828901612a59565b9550506020612d41888289016129ec565b9450506040612d5288828901612a44565b9350506060612d6388828901612a44565b9250506080612d7488828901612a59565b9150509295509295909350565b612d8a816131ee565b82525050565b612d9981613200565b82525050565b6000612daa82613096565b612db481856130ac565b9350612dc48185602086016132c7565b612dcd81613437565b840191505092915050565b612de181613282565b82525050565b612df081613238565b82525050565b6000612e01826130a1565b612e0b81856130bd565b9350612e1b8185602086016132c7565b612e2481613437565b840191505092915050565b6000612e3a826130a1565b612e4481856130ce565b9350612e548185602086016132c7565b80840191505092915050565b6000612e6d6002836130ce565b9150612e7882613448565b600282019050919050565b6000612e906058836130ce565b9150612e9b82613471565b605882019050919050565b6000612eb36043836130ce565b9150612ebe826134e6565b604382019050919050565b612ed281613262565b82525050565b6000612ee48284612e2f565b915081905092915050565b6000612efb8285612e2f565b9150612f078284612e2f565b91508190509392505050565b6000612f1e82612e83565b9150612f2982612ea6565b9150612f358284612e2f565b9150612f4082612e60565b915081905092915050565b6000602082019050612f606000830184612d81565b92915050565b6000608082019050612f7b6000830187612d81565b612f886020830186612d81565b612f956040830185612ec9565b8181036060830152612fa78184612d9f565b905095945050505050565b6000602082019050612fc76000830184612d90565b92915050565b6000602082019050612fe26000830184612dd8565b92915050565b6000602082019050612ffd6000830184612de7565b92915050565b6000602082019050818103600083015261301d8184612df6565b905092915050565b600060208201905061303a6000830184612ec9565b92915050565b600061304a61305b565b9050613056828261332c565b919050565b6000604051905090565b600067ffffffffffffffff8211156130805761307f6133ea565b5b61308982613437565b9050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b60006130e482613262565b91506130ef83613262565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156131245761312361335d565b5b828201905092915050565b600061313a82613262565b915061314583613262565b9250826131555761315461338c565b5b828204905092915050565b600061316b82613262565b915061317683613262565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156131af576131ae61335d565b5b828202905092915050565b60006131c582613262565b91506131d083613262565b9250828210156131e3576131e261335d565b5b828203905092915050565b60006131f982613242565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600069ffffffffffffffffffff82169050919050565b600061328d82613294565b9050919050565b600061329f826132a6565b9050919050565b60006132b182613242565b9050919050565b82818337600083830152505050565b60005b838110156132e55780820151818401526020810190506132ca565b838111156132f4576000848401525b50505050565b6000600282049050600182168061331257607f821691505b60208210811415613326576133256133bb565b5b50919050565b61333582613437565b810181811067ffffffffffffffff82111715613354576133536133ea565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f227d000000000000000000000000000000000000000000000000000000000000600082015250565b7f7b226e616d65223a2244796e616d696320535647222c2022646573637269707460008201527f696f6e223a22416e204e46542074686174206368616e6765732062617365642060208201527f6f6e2074686520436861696e6c696e6b2046656564222c200000000000000000604082015250565b7f2261747472696275746573223a205b7b2274726169745f74797065223a20226360008201527f6f6f6c6e657373222c202276616c7565223a203130307d5d2c2022696d61676560208201527f223a220000000000000000000000000000000000000000000000000000000000604082015250565b613564816131ee565b811461356f57600080fd5b50565b61357b81613200565b811461358657600080fd5b50565b6135928161320c565b811461359d57600080fd5b50565b6135a981613238565b81146135b457600080fd5b50565b6135c081613262565b81146135cb57600080fd5b50565b6135d78161326c565b81146135e257600080fd5b5056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa2646970667358221220f54079a43f852b239b4c896f047e2bd3bf0abe6a18f67042cc4ffcc34c188f4a64736f6c634300080700334142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101585760003560e01c80637e5bc3de116100c3578063b88d4fde1161007c578063b88d4fde146103b7578063c87b56dd146103d3578063e2c6d0e114610403578063e985e9c514610421578063f2fde38b14610451578063f3fe3bc31461046d57610158565b80637e5bc3de14610305578063860d248a146103235780638da5cb5b14610341578063957b89561461035f57806395d89b411461037d578063a22cb4651461039b57610158565b80631c05364a116101155780631c05364a1461021f57806323b872dd1461023d57806330d871c61461025957806342842e0e146102895780636352211e146102a557806370a08231146102d557610158565b806301ffc9a71461015d57806306fdde031461018d578063081812fc146101ab578063095ea7b3146101db5780630b21a83b146101f75780631249c58b14610215575b600080fd5b61017760048036038101906101729190612c36565b61048b565b6040516101849190612fb2565b60405180910390f35b6101956104f2565b6040516101a29190613003565b60405180910390f35b6101c560048036038101906101c09190612cd9565b610584565b6040516101d29190612f4b565b60405180910390f35b6101f560048036038101906101f09190612bf6565b61069f565b005b6101ff610a82565b60405161020c9190613025565b60405180910390f35b61021d610a88565b005b610227610b74565b6040516102349190613003565b60405180910390f35b61025760048036038101906102529190612adb565b610c02565b005b610273600480360381019061026e9190612c90565b611054565b6040516102809190613003565b60405180910390f35b6102a3600480360381019061029e9190612adb565b6110e7565b005b6102bf60048036038101906102ba9190612cd9565b611107565b6040516102cc9190612f4b565b60405180910390f35b6102ef60048036038101906102ea9190612a6e565b6111ed565b6040516102fc9190613025565b60405180910390f35b61030d6112a7565b60405161031a9190612fe8565b60405180910390f35b61032b6112cb565b6040516103389190613003565b60405180910390f35b610349611304565b6040516103569190612f4b565b60405180910390f35b61036761132a565b6040516103749190612fcd565b60405180910390f35b61038561134e565b6040516103929190613003565b60405180910390f35b6103b560048036038101906103b09190612bb6565b6113e0565b005b6103d160048036038101906103cc9190612b2e565b6114dd565b005b6103ed60048036038101906103e89190612cd9565b611534565b6040516103fa9190613003565b60405180910390f35b61040b61178c565b6040516104189190613003565b60405180910390f35b61043b60048036038101906104369190612a9b565b61181a565b6040516104489190612fb2565b60405180910390f35b61046b60048036038101906104669190612a6e565b6118ae565b005b610475611ae0565b6040516104829190613003565b60405180910390f35b6000806000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460ff169050919050565b606060058054610501906132fa565b80601f016020809104026020016040519081016040528092919081815260200182805461052d906132fa565b801561057a5780601f1061054f5761010080835404028352916020019161057a565b820191906000526020600020905b81548152906001019060200180831161055d57829003601f168201915b5050505050905090565b600081600073ffffffffffffffffffffffffffffffffffffffff166001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156040518060400160405280600681526020017f303033303032000000000000000000000000000000000000000000000000000081525090610662576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106599190613003565b60405180910390fd5b506002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16915050919050565b8060006001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614806107985750600460008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b6040518060400160405280600681526020017f30303330303300000000000000000000000000000000000000000000000000008152509061080f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108069190613003565b60405180910390fd5b5082600073ffffffffffffffffffffffffffffffffffffffff166001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156040518060400160405280600681526020017f3030333030320000000000000000000000000000000000000000000000000000815250906108ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108e39190613003565b60405180910390fd5b5060006001600086815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614156040518060400160405280600681526020017f3030333030380000000000000000000000000000000000000000000000000000815250906109cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109c39190613003565b60405180910390fd5b50856002600087815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550848673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a4505050505050565b60095481565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146040518060400160405280600681526020017f303138303031000000000000000000000000000000000000000000000000000081525090610b50576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b479190613003565b60405180910390fd5b50610b5d33600954611c92565b6001600954610b6c91906130d9565b600981905550565b600b8054610b81906132fa565b80601f0160208091040260200160405190810160405280929190818152602001828054610bad906132fa565b8015610bfa5780601f10610bcf57610100808354040283529160200191610bfa565b820191906000526020600020905b815481529060010190602001808311610bdd57829003601f168201915b505050505081565b8060006001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161480610cd357503373ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b80610d645750600460008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b6040518060400160405280600681526020017f303033303034000000000000000000000000000000000000000000000000000081525090610ddb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dd29190613003565b60405180910390fd5b5082600073ffffffffffffffffffffffffffffffffffffffff166001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156040518060400160405280600681526020017f303033303032000000000000000000000000000000000000000000000000000081525090610eb8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eaf9190613003565b60405180910390fd5b5060006001600086815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146040518060400160405280600681526020017f303033303037000000000000000000000000000000000000000000000000000081525090610f97576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f8e9190613003565b60405180910390fd5b50600073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614156040518060400160405280600681526020017f303033303031000000000000000000000000000000000000000000000000000081525090611040576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110379190613003565b60405180910390fd5b5061104b8686611e80565b50505050505050565b606060006040518060400160405280601a81526020017f646174613a696d6167652f7376672b786d6c3b6261736536342c000000000000815250905060006110ba846040516020016110a69190612ed8565b604051602081830303815290604052611b19565b905081816040516020016110cf929190612eef565b60405160208183030381529060405292505050919050565b61110283838360405180602001604052806000815250611f35565b505050565b60006001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156040518060400160405280600681526020017f3030333030320000000000000000000000000000000000000000000000000000815250906111e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111de9190613003565b60405180910390fd5b50919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156040518060400160405280600681526020017f303033303031000000000000000000000000000000000000000000000000000081525090611296576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161128d9190613003565b60405180910390fd5b506112a082612503565b9050919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6040518060400160405280600681526020017f303138303032000000000000000000000000000000000000000000000000000081525081565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b60606006805461135d906132fa565b80601f0160208091040260200160405190810160405280929190818152602001828054611389906132fa565b80156113d65780601f106113ab576101008083540402835291602001916113d6565b820191906000526020600020905b8154815290600101906020018083116113b957829003601f168201915b5050505050905090565b80600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516114d19190612fb2565b60405180910390a35050565b61152d85858585858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050611f35565b5050505050565b606060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561159e57600080fd5b505afa1580156115b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115d69190612d06565b5050509150506000600a80546115eb906132fa565b80601f0160208091040260200160405190810160405280929190818152602001828054611617906132fa565b80156116645780601f1061163957610100808354040283529160200191611664565b820191906000526020600020905b81548152906001019060200180831161164757829003601f168201915b505050505090507f000000000000000000000000000000000000000000000000000000000000000082131561172157600b80546116a0906132fa565b80601f01602080910402602001604051908101604052809291908181526020018280546116cc906132fa565b80156117195780601f106116ee57610100808354040283529160200191611719565b820191906000526020600020905b8154815290600101906020018083116116fc57829003601f168201915b505050505090505b6000816040516020016117349190612f13565b60405160208183030381529060405290506000819050600061175582611b19565b905061175f61254c565b81604051602001611771929190612eef565b60405160208183030381529060405295505050505050919050565b600a8054611799906132fa565b80601f01602080910402602001604051908101604052809291908181526020018280546117c5906132fa565b80156118125780601f106117e757610100808354040283529160200191611812565b820191906000526020600020905b8154815290600101906020018083116117f557829003601f168201915b505050505081565b6000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146040518060400160405280600681526020017f303138303031000000000000000000000000000000000000000000000000000081525090611976576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161196d9190613003565b60405180910390fd5b50600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156040518060400160405280600681526020017f303138303032000000000000000000000000000000000000000000000000000081525090611a1f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a169190613003565b60405180910390fd5b508073ffffffffffffffffffffffffffffffffffffffff16600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6040518060400160405280600681526020017f303138303031000000000000000000000000000000000000000000000000000081525081565b6060600082511415611b3c57604051806020016040528060008152509050611c8d565b60006040518060600160405280604081526020016135e66040913990506000600360028551611b6b91906130d9565b611b75919061312f565b6004611b819190613160565b90506000602082611b9291906130d9565b67ffffffffffffffff811115611bab57611baa6133ea565b5b6040519080825280601f01601f191660200182016040528015611bdd5781602001600182028036833780820191505090505b509050818152600183018586518101602084015b81831015611c4c576003830192508251603f8160121c168501518253600182019150603f81600c1c168501518253600182019150603f8160061c168501518253600182019150603f8116850151825360018201915050611bf1565b600389510660018114611c665760028114611c7657611c81565b613d3d60f01b6002830352611c81565b603d60f81b60018303525b50505050508093505050505b919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156040518060400160405280600681526020017f303033303031000000000000000000000000000000000000000000000000000081525090611d3a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d319190613003565b60405180910390fd5b50600073ffffffffffffffffffffffffffffffffffffffff166001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146040518060400160405280600681526020017f303033303036000000000000000000000000000000000000000000000000000081525090611e15576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e0c9190613003565b60405180910390fd5b50611e208282612589565b808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b60006001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050611ec182612711565b611ecb818361274a565b611ed58383612589565b818373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b8160006001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16148061200657503373ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b806120975750600460008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b6040518060400160405280600681526020017f30303330303400000000000000000000000000000000000000000000000000008152509061210e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121059190613003565b60405180910390fd5b5083600073ffffffffffffffffffffffffffffffffffffffff166001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156040518060400160405280600681526020017f3030333030320000000000000000000000000000000000000000000000000000815250906121eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121e29190613003565b60405180910390fd5b5060006001600087815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508773ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146040518060400160405280600681526020017f3030333030370000000000000000000000000000000000000000000000000000815250906122ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122c19190613003565b60405180910390fd5b50600073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff1614156040518060400160405280600681526020017f303033303031000000000000000000000000000000000000000000000000000081525090612373576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161236a9190613003565b60405180910390fd5b5061237e8787611e80565b61239d8773ffffffffffffffffffffffffffffffffffffffff166128b5565b156124f95760008773ffffffffffffffffffffffffffffffffffffffff1663150b7a02338b8a8a6040518563ffffffff1660e01b81526004016123e39493929190612f66565b602060405180830381600087803b1580156123fd57600080fd5b505af1158015612411573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124359190612c63565b905063150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916146040518060400160405280600681526020017f3030333030350000000000000000000000000000000000000000000000000000815250906124f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124ed9190613003565b60405180910390fd5b50505b5050505050505050565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60606040518060400160405280601d81526020017f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000815250905090565b600073ffffffffffffffffffffffffffffffffffffffff166001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146040518060400160405280600681526020017f303033303036000000000000000000000000000000000000000000000000000081525090612663576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161265a9190613003565b60405180910390fd5b50816001600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461270691906130d9565b925050819055505050565b6002600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550565b8173ffffffffffffffffffffffffffffffffffffffff166001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146040518060400160405280600681526020017f303033303037000000000000000000000000000000000000000000000000000081525090612823576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161281a9190613003565b60405180910390fd5b506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461287491906131ba565b925050819055506001600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690555050565b60008060007fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47060001b9050833f91506000801b82141580156128f75750808214155b92505050919050565b600061291361290e84613065565b613040565b90508281526020810184848401111561292f5761292e613428565b5b61293a8482856132b8565b509392505050565b6000813590506129518161355b565b92915050565b60008135905061296681613572565b92915050565b60008135905061297b81613589565b92915050565b60008151905061299081613589565b92915050565b60008083601f8401126129ac576129ab61341e565b5b8235905067ffffffffffffffff8111156129c9576129c8613419565b5b6020830191508360018202830111156129e5576129e4613423565b5b9250929050565b6000815190506129fb816135a0565b92915050565b600082601f830112612a1657612a1561341e565b5b8135612a26848260208601612900565b91505092915050565b600081359050612a3e816135b7565b92915050565b600081519050612a53816135b7565b92915050565b600081519050612a68816135ce565b92915050565b600060208284031215612a8457612a83613432565b5b6000612a9284828501612942565b91505092915050565b60008060408385031215612ab257612ab1613432565b5b6000612ac085828601612942565b9250506020612ad185828601612942565b9150509250929050565b600080600060608486031215612af457612af3613432565b5b6000612b0286828701612942565b9350506020612b1386828701612942565b9250506040612b2486828701612a2f565b9150509250925092565b600080600080600060808688031215612b4a57612b49613432565b5b6000612b5888828901612942565b9550506020612b6988828901612942565b9450506040612b7a88828901612a2f565b935050606086013567ffffffffffffffff811115612b9b57612b9a61342d565b5b612ba788828901612996565b92509250509295509295909350565b60008060408385031215612bcd57612bcc613432565b5b6000612bdb85828601612942565b9250506020612bec85828601612957565b9150509250929050565b60008060408385031215612c0d57612c0c613432565b5b6000612c1b85828601612942565b9250506020612c2c85828601612a2f565b9150509250929050565b600060208284031215612c4c57612c4b613432565b5b6000612c5a8482850161296c565b91505092915050565b600060208284031215612c7957612c78613432565b5b6000612c8784828501612981565b91505092915050565b600060208284031215612ca657612ca5613432565b5b600082013567ffffffffffffffff811115612cc457612cc361342d565b5b612cd084828501612a01565b91505092915050565b600060208284031215612cef57612cee613432565b5b6000612cfd84828501612a2f565b91505092915050565b600080600080600060a08688031215612d2257612d21613432565b5b6000612d3088828901612a59565b9550506020612d41888289016129ec565b9450506040612d5288828901612a44565b9350506060612d6388828901612a44565b9250506080612d7488828901612a59565b9150509295509295909350565b612d8a816131ee565b82525050565b612d9981613200565b82525050565b6000612daa82613096565b612db481856130ac565b9350612dc48185602086016132c7565b612dcd81613437565b840191505092915050565b612de181613282565b82525050565b612df081613238565b82525050565b6000612e01826130a1565b612e0b81856130bd565b9350612e1b8185602086016132c7565b612e2481613437565b840191505092915050565b6000612e3a826130a1565b612e4481856130ce565b9350612e548185602086016132c7565b80840191505092915050565b6000612e6d6002836130ce565b9150612e7882613448565b600282019050919050565b6000612e906058836130ce565b9150612e9b82613471565b605882019050919050565b6000612eb36043836130ce565b9150612ebe826134e6565b604382019050919050565b612ed281613262565b82525050565b6000612ee48284612e2f565b915081905092915050565b6000612efb8285612e2f565b9150612f078284612e2f565b91508190509392505050565b6000612f1e82612e83565b9150612f2982612ea6565b9150612f358284612e2f565b9150612f4082612e60565b915081905092915050565b6000602082019050612f606000830184612d81565b92915050565b6000608082019050612f7b6000830187612d81565b612f886020830186612d81565b612f956040830185612ec9565b8181036060830152612fa78184612d9f565b905095945050505050565b6000602082019050612fc76000830184612d90565b92915050565b6000602082019050612fe26000830184612dd8565b92915050565b6000602082019050612ffd6000830184612de7565b92915050565b6000602082019050818103600083015261301d8184612df6565b905092915050565b600060208201905061303a6000830184612ec9565b92915050565b600061304a61305b565b9050613056828261332c565b919050565b6000604051905090565b600067ffffffffffffffff8211156130805761307f6133ea565b5b61308982613437565b9050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b60006130e482613262565b91506130ef83613262565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156131245761312361335d565b5b828201905092915050565b600061313a82613262565b915061314583613262565b9250826131555761315461338c565b5b828204905092915050565b600061316b82613262565b915061317683613262565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156131af576131ae61335d565b5b828202905092915050565b60006131c582613262565b91506131d083613262565b9250828210156131e3576131e261335d565b5b828203905092915050565b60006131f982613242565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600069ffffffffffffffffffff82169050919050565b600061328d82613294565b9050919050565b600061329f826132a6565b9050919050565b60006132b182613242565b9050919050565b82818337600083830152505050565b60005b838110156132e55780820151818401526020810190506132ca565b838111156132f4576000848401525b50505050565b6000600282049050600182168061331257607f821691505b60208210811415613326576133256133bb565b5b50919050565b61333582613437565b810181811067ffffffffffffffff82111715613354576133536133ea565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f227d000000000000000000000000000000000000000000000000000000000000600082015250565b7f7b226e616d65223a2244796e616d696320535647222c2022646573637269707460008201527f696f6e223a22416e204e46542074686174206368616e6765732062617365642060208201527f6f6e2074686520436861696e6c696e6b2046656564222c200000000000000000604082015250565b7f2261747472696275746573223a205b7b2274726169745f74797065223a20226360008201527f6f6f6c6e657373222c202276616c7565223a203130307d5d2c2022696d61676560208201527f223a220000000000000000000000000000000000000000000000000000000000604082015250565b613564816131ee565b811461356f57600080fd5b50565b61357b81613200565b811461358657600080fd5b50565b6135928161320c565b811461359d57600080fd5b50565b6135a981613238565b81146135b457600080fd5b50565b6135c081613262565b81146135cb57600080fd5b50565b6135d78161326c565b81146135e257600080fd5b5056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa2646970667358221220f54079a43f852b239b4c896f047e2bd3bf0abe6a18f67042cc4ffcc34c188f4a64736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "Set or reaffirm the approved address for an NFT. This function can be changed to payable.",
        "params": {
          "_approved": "Address to be approved for the given NFT ID.",
          "_tokenId": "ID of the token to be approved."
        }
      },
      "balanceOf(address)": {
        "details": "Returns the number of NFTs owned by `_owner`. NFTs assigned to the zero address are considered invalid, and this function throws for queries about the zero address.",
        "params": {
          "_owner": "Address for whom to query the balance."
        },
        "returns": {
          "_0": "Balance of _owner."
        }
      },
      "getApproved(uint256)": {
        "details": "Get the approved address for a single NFT.",
        "params": {
          "_tokenId": "ID of the NFT to query the approval of."
        },
        "returns": {
          "_0": "Address that _tokenId is approved for."
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "Checks if `_operator` is an approved operator for `_owner`.",
        "params": {
          "_operator": "The address that acts on behalf of the owner.",
          "_owner": "The address that owns the NFTs."
        },
        "returns": {
          "_0": "True if approved for all, false otherwise."
        }
      },
      "name()": {
        "details": "Returns a descriptive name for a collection of NFTokens.",
        "returns": {
          "_name": "Representing name."
        }
      },
      "ownerOf(uint256)": {
        "details": "Returns the address of the owner of the NFT. NFTs assigned to the zero address are considered invalid, and queries about them do throw.",
        "params": {
          "_tokenId": "The identifier for an NFT."
        },
        "returns": {
          "_owner": "Address of _tokenId owner."
        }
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "Transfers the ownership of an NFT from one address to another address. This function can be changed to payable.",
        "params": {
          "_from": "The current owner of the NFT.",
          "_to": "The new owner.",
          "_tokenId": "The NFT to transfer."
        }
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "Transfers the ownership of an NFT from one address to another address. This function can be changed to payable.",
        "params": {
          "_data": "Additional data with no specified format, sent in call to `_to`.",
          "_from": "The current owner of the NFT.",
          "_to": "The new owner.",
          "_tokenId": "The NFT to transfer."
        }
      },
      "setApprovalForAll(address,bool)": {
        "details": "Enables or disables approval for a third party (\"operator\") to manage all of `msg.sender`'s assets. It also emits the ApprovalForAll event.",
        "params": {
          "_approved": "True if the operators is approved, false to revoke approval.",
          "_operator": "Address to add to the set of authorized operators."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Function to check which interfaces are supported by this contract.",
        "params": {
          "_interfaceID": "Id of the interface."
        },
        "returns": {
          "_0": "True if _interfaceID is supported, false otherwise."
        }
      },
      "symbol()": {
        "details": "Returns an abbreviated name for NFTokens.",
        "returns": {
          "_symbol": "Representing symbol."
        }
      },
      "transferFrom(address,address,uint256)": {
        "details": "Throws unless `msg.sender` is the current owner, an authorized operator, or the approved address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is the zero address. Throws if `_tokenId` is not a valid NFT. This function can be changed to payable.",
        "params": {
          "_from": "The current owner of the NFT.",
          "_to": "The new owner.",
          "_tokenId": "The NFT to transfer."
        }
      },
      "transferOwnership(address)": {
        "details": "Allows the current owner to transfer control of the contract to a newOwner.",
        "params": {
          "_newOwner": "The address to transfer ownership to."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "approve(address,uint256)": {
        "notice": "The zero address indicates there is no approved address. Throws unless `msg.sender` is the current NFT owner, or an authorized operator of the current owner."
      },
      "getApproved(uint256)": {
        "notice": "Throws if `_tokenId` is not a valid NFT."
      },
      "safeTransferFrom(address,address,uint256)": {
        "notice": "This works identically to the other function with an extra data parameter, except this function just sets data to \"\"."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "notice": "Throws unless `msg.sender` is the current owner, an authorized operator, or the approved address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is the zero address. Throws if `_tokenId` is not a valid NFT. When transfer is complete, this function checks if `_to` is a smart contract (code size > 0). If so, it calls `onERC721Received` on `_to` and throws if the return value is not `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`."
      },
      "setApprovalForAll(address,bool)": {
        "notice": "This works even if sender doesn't own any tokens at the time."
      },
      "transferFrom(address,address,uint256)": {
        "notice": "The caller is responsible to confirm that `_to` is capable of receiving NFTs or else they may be permanently lost."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1426,
        "contract": "src/contracts/mocks/DynamicSvgtNft.sol:DynamicSvgNft",
        "label": "supportedInterfaces",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes4,t_bool)"
      },
      {
        "astId": 749,
        "contract": "src/contracts/mocks/DynamicSvgtNft.sol:DynamicSvgNft",
        "label": "idToOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 754,
        "contract": "src/contracts/mocks/DynamicSvgtNft.sol:DynamicSvgNft",
        "label": "idToApproval",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 759,
        "contract": "src/contracts/mocks/DynamicSvgtNft.sol:DynamicSvgNft",
        "label": "ownerToNFTokenCount",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 766,
        "contract": "src/contracts/mocks/DynamicSvgtNft.sol:DynamicSvgNft",
        "label": "ownerToOperators",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 590,
        "contract": "src/contracts/mocks/DynamicSvgtNft.sol:DynamicSvgNft",
        "label": "nftName",
        "offset": 0,
        "slot": "5",
        "type": "t_string_storage"
      },
      {
        "astId": 593,
        "contract": "src/contracts/mocks/DynamicSvgtNft.sol:DynamicSvgNft",
        "label": "nftSymbol",
        "offset": 0,
        "slot": "6",
        "type": "t_string_storage"
      },
      {
        "astId": 598,
        "contract": "src/contracts/mocks/DynamicSvgtNft.sol:DynamicSvgNft",
        "label": "idToUri",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 364,
        "contract": "src/contracts/mocks/DynamicSvgtNft.sol:DynamicSvgNft",
        "label": "owner",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 172,
        "contract": "src/contracts/mocks/DynamicSvgtNft.sol:DynamicSvgNft",
        "label": "s_tokenCounter",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 174,
        "contract": "src/contracts/mocks/DynamicSvgtNft.sol:DynamicSvgNft",
        "label": "s_lowImageURI",
        "offset": 0,
        "slot": "10",
        "type": "t_string_storage"
      },
      {
        "astId": 176,
        "contract": "src/contracts/mocks/DynamicSvgtNft.sol:DynamicSvgNft",
        "label": "s_highImageURI",
        "offset": 0,
        "slot": "11",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes4,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}